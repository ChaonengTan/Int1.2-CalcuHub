{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Volumes/GoogleDrive/My Drive/2020-2021/Others/Int1.2/Int1.2-CalcuHub/calcuhub/src/components/calculators/TipCalculator/TipCalculator.js\";\nimport { Component } from 'react';\nimport './TipCalculator.css';\n\nclass TipCalculator extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      bill: 0,\n      tip: 0,\n      people: 1\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"form\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Bill: $\", this.state.bill]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Tip: \", this.state.tip, \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Total/Person: $\", ((parseInt(this.state.bill) + parseInt(this.state.bill) * parseInt(this.state.tip) / 100) / parseInt(this.state.people)).toFixed(2)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inputs\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            for: \"Bill\",\n            children: \"Bill: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 20,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"Bill\",\n            placeholder: \"Bill\",\n            type: \"number\",\n            value: this.state.bill,\n            onChange: e => {\n              this.setState({\n                bill: e.target.value\n              });\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 21,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            for: \"Tip\",\n            children: \"Tip %: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"Tip\",\n            placeholder: \"Tip\",\n            type: \"number\",\n            value: this.state.tip,\n            onChange: e => {\n              this.setState({\n                tip: e.target.value\n              });\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            for: \"People to Split Upon\",\n            children: \"People to Split Upon: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"People to Split Upon\",\n            placeholder: \"People to Split Upon\",\n            type: \"number\",\n            value: this.state.people,\n            onChange: e => {\n              this.setState({\n                people: e.target.value\n              });\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default TipCalculator;","map":{"version":3,"sources":["/Volumes/GoogleDrive/My Drive/2020-2021/Others/Int1.2/Int1.2-CalcuHub/calcuhub/src/components/calculators/TipCalculator/TipCalculator.js"],"names":["Component","TipCalculator","constructor","props","state","bill","tip","people","render","parseInt","toFixed","e","setState","target","value"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAO,qBAAP;;AACA,MAAMC,aAAN,SAA4BD,SAA5B,CAAqC;AACjCE,EAAAA,WAAW,CAAEC,KAAF,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAW;AACPC,MAAAA,IAAI,EAAE,CADC;AAEPC,MAAAA,GAAG,EAAE,CAFE;AAGPC,MAAAA,MAAM,EAAE;AAHD,KAAX;AAKH;;AACDC,EAAAA,MAAM,GAAG;AACL,wBACI;AAAM,MAAA,SAAS,EAAC,MAAhB;AAAA,8BACI;AAAA,8BAAY,KAAKJ,KAAL,CAAWC,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA,4BAAU,KAAKD,KAAL,CAAWE,GAArB;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAA,sCAAoB,CAAC,CAACG,QAAQ,CAAC,KAAKL,KAAL,CAAWC,IAAZ,CAAR,GAA8BI,QAAQ,CAAC,KAAKL,KAAL,CAAWC,IAAZ,CAAR,GAA4BI,QAAQ,CAAC,KAAKL,KAAL,CAAWE,GAAZ,CAArC,GAAyD,GAAvF,IAA6FG,QAAQ,CAAC,KAAKL,KAAL,CAAWG,MAAZ,CAAtG,EAA2HG,OAA3H,CAAmI,CAAnI,CAApB;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ,eAII;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA,gCACA;AAAA,kCACI;AAAO,YAAA,GAAG,EAAC,MAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AACI,YAAA,EAAE,EAAC,MADP;AAEI,YAAA,WAAW,EAAG,MAFlB;AAGI,YAAA,IAAI,EAAG,QAHX;AAII,YAAA,KAAK,EAAI,KAAKN,KAAL,CAAWC,IAJxB;AAKI,YAAA,QAAQ,EAAKM,CAAD,IAAO;AAAC,mBAAKC,QAAL,CAAc;AAACP,gBAAAA,IAAI,EAAEM,CAAC,CAACE,MAAF,CAASC;AAAhB,eAAd;AAAsC;AAL9D;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBADA,eAWA;AAAA,kCACI;AAAO,YAAA,GAAG,EAAC,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AACI,YAAA,EAAE,EAAC,KADP;AAEI,YAAA,WAAW,EAAG,KAFlB;AAGI,YAAA,IAAI,EAAG,QAHX;AAII,YAAA,KAAK,EAAI,KAAKV,KAAL,CAAWE,GAJxB;AAKI,YAAA,QAAQ,EAAKK,CAAD,IAAO;AAAC,mBAAKC,QAAL,CAAc;AAACN,gBAAAA,GAAG,EAAEK,CAAC,CAACE,MAAF,CAASC;AAAf,eAAd;AAAqC;AAL7D;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAXA,eAqBA;AAAA,kCACI;AAAO,YAAA,GAAG,EAAC,sBAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AACI,YAAA,EAAE,EAAC,sBADP;AAEI,YAAA,WAAW,EAAG,sBAFlB;AAGI,YAAA,IAAI,EAAG,QAHX;AAII,YAAA,KAAK,EAAI,KAAKV,KAAL,CAAWG,MAJxB;AAKI,YAAA,QAAQ,EAAKI,CAAD,IAAO;AAAC,mBAAKC,QAAL,CAAc;AAACL,gBAAAA,MAAM,EAAEI,CAAC,CAACE,MAAF,CAASC;AAAlB,eAAd;AAAwC;AALhE;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBArBA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAuCH;;AAjDgC;;AAmDrC,eAAeb,aAAf","sourcesContent":["import { Component } from 'react'\nimport './TipCalculator.css'\nclass TipCalculator extends Component{\n    constructor (props){\n        super(props)\n        this.state={\n            bill: 0,\n            tip: 0, \n            people: 1\n        }\n    }\n    render (){\n        return(\n            <form className='form'>\n                <h1>Bill: ${this.state.bill}</h1>\n                <h1>Tip: {this.state.tip}%</h1>\n                <h1>Total/Person: ${((parseInt(this.state.bill) + ((parseInt(this.state.bill) * parseInt(this.state.tip)) / 100))/parseInt(this.state.people)).toFixed(2)}</h1>\n                <div className='inputs'>\n                <div>\n                    <label for=\"Bill\">Bill: </label>\n                    <input\n                        id='Bill'\n                        placeholder = 'Bill'\n                        type = 'number'\n                        value = {this.state.bill}\n                        onChange = {(e) => {this.setState({bill: e.target.value})}}\n                    />\n                </div>\n                <div>\n                    <label for=\"Tip\">Tip %: </label>\n                    <input\n                        id='Tip'\n                        placeholder = 'Tip'\n                        type = 'number'\n                        value = {this.state.tip}\n                        onChange = {(e) => {this.setState({tip: e.target.value})}}\n                    />\n                </div>\n                <div>\n                    <label for=\"People to Split Upon\">People to Split Upon: </label>\n                    <input\n                        id='People to Split Upon'\n                        placeholder = 'People to Split Upon'\n                        type = 'number'\n                        value = {this.state.people}\n                        onChange = {(e) => {this.setState({people: e.target.value})}}\n                    />\n                </div>\n                </div>\n            </form>\n        )\n    }\n}\nexport default TipCalculator"]},"metadata":{},"sourceType":"module"}